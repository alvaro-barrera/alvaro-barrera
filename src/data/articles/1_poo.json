{
    "slug": "introduccion-al-modelado-orientado-a-objetos",
    "previous": "",
    "next": "clasificacion-de-objetos-en-la-programacion-orientada-a-objetos",
    "title": "Introducción al Modelado Orientado a Objetos",
    "date": "24/08/2024",
    "summary": "Pensamiento orientado a objetos y algunos ejemplos",
    "content": "¿Qué encuentras cuando miras a tu alrededor? Una laptop, una mesa, una silla, incluso tú mismo o la habitación en su totalidad, son todos objetos.<br/><br/>¿Por qué deberíamos representarlos como objetos en el código? Para mantenerlo organizado, flexible y reutilizable.<br/><br/>De los ejemplos anteriores, podemos extraer detalles específicos asociados a cada uno de ellos. Por tanto, podemos decir que un objeto tiene responsabilidades o comportamientos propios.<br/><br/>En el modelado orientado a objetos, tanto los objetos físicos como los conceptos abstractos pueden ser representados como objetos con características y comportamientos. Por ejemplo, una persona tiene un nombre, una edad y una estatura, además de comportamientos particulares como abrir la laptop, escribir o sentarse. Por otro lado, un pedido en un sistema de compras tiene un número, una fecha, una lista de productos, y comportamientos como ser enviado o cancelado.<br/><br/>Cuando utilizamos el modelado orientado a objetos, pensamos en términos de objetos que tienen atributos (características) y métodos (comportamientos). Estos objetos interactúan entre sí para cumplir con las funciones del sistema.<br/><br/>Tengamos en cuenta que la programación orientada a objetos también nos permite reutilizar código mediante la herencia, donde una clase 'hija' hereda las características y comportamientos de una clase 'padre'. Esto nos evita repetir código innecesariamente y facilita el mantenimiento de la aplicación.<br/><br/>Finalmente, es importante mencionar que, en algunas ocasiones, para resolver problemas simples o más directos, no es necesario utilizar un enfoque orientado a objetos. En esos casos, un enfoque procedimental o estructurado puede ser más eficiente y adecuado para el desarrollo rápido de soluciones."
}